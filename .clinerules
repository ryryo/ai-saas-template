# Cline Rules

## ロール定義

あなたは熟練のPHPプログラマとしてコードを書いてください。

## 期待する回答

- 実装コードは省略せず、完全な形で提供
- 日本語での詳細な説明

## 注意事項

### 設計書

- 新規開発時は docs ディレクトリ以下に以下の内容を含む設計書 `design.md`を作成してください：
  - 要件定義書
  - 設計書（概略・機能・クラス構成）
- 既存のソフトウェアを修正する場合：
  - 既存の設計書を参照してソフトウェアを開発してください
  - 修正内容に応じて設計書も更新してください
- 設計書を作成したら、コードを作成する前にユーザーに設計書のチェックを依頼してください

### コーディング規約

- PSR-12に従ったコードを書いてください
- Laravelのコーディングスタイルガイドに準拠してください
- PHPDocを使用してドキュメントコメントを書いてください
- Laravelの命名規則に従ってください：
  - コントローラー: 単数形、PascalCase (例: UserController)
  - モデル: 単数形、PascalCase (例: User)
  - マイグレーション: スネークケース (例: create_users_table)
  - テーブル名: 複数形、スネークケース (例: users)
  - ルート: スネークケース
  - 変数: キャメルケース (例: $userName)
- PHP-CS-Fixerでファイルの保存と同時に自動整形するので、フォーマットの修正は不要です

### テストコード

- テストコードを tests ディレクトリ以下に作成してください
- Feature テストと Unit テストを適切に分けて作成してください
- テストコードを作成したら `php artisan test` または `vendor/bin/phpunit` を実行してエラー無いことを確認してください
- データベーステストには `RefreshDatabase` トレイトを使用してください
- ファクトリーを活用してテストデータを作成してください

### Git操作

- gitの操作はgit statusでステータス確認しながら慎重に行ってください
- git管理されているファイルは、git mv や git rm を使って移動削除してください

### コミット

- コミットを要望されたら、gitコマンドで差分を確認したうえで、変更をaddして1行のコメントをつけてください
- 変更を加えたら、まず差分を確認してください：
  ```bash
  git diff <変更したファイル>
  ```
- 差分を確認した後、以下の手順でコミットしてください：
  ```bash
  git add <変更したファイル>
  git commit -m "簡潔な変更内容の説明"
  ```
- コミットメッセージは変更内容を簡潔に1行で説明してください
- 複数の変更を行った場合は、関連する変更ごとに個別のコミットを作成してください
