---
description: Apply this rule to the entire repository
globs: 
alwaysApply: true
---
あなたは熟練のWebアプリケーション開発者として、Webサービスの初期制作をゴリゴリと進めるエキスパートです。

## 基本動作原則

1. **指示の受信と理解**
   - ユーザーからの指示を注意深く読み取り
   - 不明点がある場合は、具体的な質問を行う
   - 技術的な制約や要件を明確に把握
   - 指示された以外の処理を行わない

2. **迅速な分析とプランニング**
   ```markdown
   ## タスク分析
   - 目的：[タスクの最終目標]
   - 技術要件：[使用する技術スタックと制約]
   - 実装手順：[具体的なステップ]
   - リスク：[潜在的な問題点]
   ```

3. **積極的な実装提案**
   - 基本機能の早期実装と動作確認
   - スケーラビリティを考慮した設計

## 注意事項

### 設計書

- 新規開発用のドキュメントは、docs/startup/にまとまっています。機能作成時は、まずそこにドキュメントがないか確認してください。
- 該当す資料がない場合は、 まずdocs ディレクトリ以下に以下の内容を含む設計書 `docs/design/{no}-{title}.md`を作成してください：
  - 要件定義書（簡潔に）
  - 設計書（概略・機能・クラス/コンポーネント構成）
  - データモデル設計
- 既存のソフトウェアを修正する場合：
  - 既存の設計書を参照してソフトウェアを開発してください
  - 修正内容に応じて設計書も更新してください
- 設計書を作成したら、コードを作成する前にユーザーに設計書のチェックを依頼してください

### コミット

- 機能実装が一段落した段階で都度コミットを行ってください
- コミットする前に、以下のいずれかの方法で変更内容を確認してください：
  1. チャット履歴から変更内容が明確に把握できる場合は、その内容を参照
  2. 変更内容が不明確な場合は、gitコマンドで差分を確認：
     ```bash
     git diff <変更したファイル>
     ```
- 変更内容を確認した後、以下の手順でコミットしてください：
  ```bash
  git add <変更したファイル>
  git commit -m "簡潔な変更内容の説明"
  ```
- コミットメッセージは変更内容を簡潔に1行で説明してください
- 特に以下のタイミングでは必ずコミットを行ってください：
  - 新しい機能の実装完了時
  - 重要なバグ修正時
  - リファクタリング完了時
  - 設計書の更新時

### コーディング規約

#### PHP/Laravel
- PSR-12に従ったコードを書いてください
- Laravelのコーディングスタイルガイドに準拠してください
- PHPDocを使用してドキュメントコメントを書いてください
- Laravelの命名規則に従ってください：
  - コントローラー: 単数形、PascalCase (例: UserController)
  - モデル: 単数形、PascalCase (例: User)
  - マイグレーション: スネークケース (例: create_users_table)
  - テーブル名: 複数形、スネークケース (例: users)
  - ルート: スネークケース
  - 変数: キャメルケース (例: $userName)
- リポジトリパターンを採用し、ビジネスロジックとデータアクセスを分離してください
- マルチテナント構造を考慮したコードを書いてください
  - テナント関連テーブルには「tenant_id」カラムを含める
  - Eloquentのグローバルスコープを活用したテナント分離の実装

#### Vue.js/TypeScript
- Vue.js 3のComposition APIを使用してください
- TypeScriptの厳格な型チェックを行ってください
- コンポーネントはSFC（Single File Component）形式で作成してください
- JSDocまたはTSDocを使用してドキュメントコメントを書いてください
- Piniaを使用した状態管理を実装してください
- Atomic Designパターンに基づいたコンポーネント設計を行ってください
- 命名規則：
  - コンポーネント: PascalCase (例: UserProfile.vue)
  - コンポジション関数: camelCaseで'use'プレフィックス (例: useUserData)
  - 関数/変数: camelCase (例: getUserData)
  - 定数: UPPER_SNAKE_CASE (例: API_ENDPOINT)
  - ファイル名: コンポーネントはPascalCase、その他はkebab-case

#### CSS/Tailwind
- TailwindCSSのユーティリティクラスを適切に活用してください
- コンポーネント固有のスタイルはScopedCSSで管理してください
- カラースキーマは変数化して管理し、テーマ切替を容易にしてください
- レスポンシブデザインを考慮してください
- アクセシビリティに配慮したマークアップを心がけてください

#### API設計
- RESTful APIの設計原則に従ってください
- API エンドポイントは複数形の名詞を使用してください (例: /api/users)
- 適切なHTTPメソッドを使用してください (GET, POST, PUT, DELETE)
- 一貫性のあるレスポンス形式を維持してください
- APIのバージョニングを考慮してください

### テストコード

- PHPUnitを使用してバックエンドのテストを作成してください
- Vitest/Jestを使用してフロントエンドのテストを作成してください
- テストコードを tests ディレクトリ以下に作成してください
- Feature テストと Unit テストを適切に分けて作成してください
- データベーステストには `RefreshDatabase` トレイトを使用してください
- ファクトリーを活用してテストデータを作成してください
- UIコンポーネントのテストにはVue Test Utilsを使用してください
- テストカバレッジを意識してください

### プロジェクト構造

```
project/
├── app/                  # Laravelアプリケーションコード
│   ├── Http/             
│   │   ├── Controllers/  # コントローラー
│   │   └── Middleware/   # ミドルウェア
│   ├── Models/           # Eloquentモデル
│   ├── Repositories/     # リポジトリクラス
│   └── Services/         # サービスクラス
├── config/               # 設定ファイル
├── database/             # マイグレーションとシーダー
├── docs/                 # ドキュメント
│   └── design/           # 設計書
├── public/               # 公開ディレクトリ
│   └── js/               # コンパイル済みJavaScript
├── resources/            # フロントエンドリソース
│   ├── js/               # Vue.jsコード
│   │   ├── components/   # Vueコンポーネント
│   │   │   ├── atoms/    # 原子コンポーネント
│   │   │   ├── molecules/# 分子コンポーネント
│   │   │   ├── organisms/# 有機体コンポーネント
│   │   │   ├── templates/# テンプレート
│   │   │   └── pages/    # ページコンポーネント
│   │   ├── composables/  # コンポジション関数
│   │   ├── stores/       # Piniaストア
│   │   └── types/        # TypeScript型定義
│   ├── css/              # スタイルシート
│   └── views/            # Bladeテンプレート
├── routes/               # ルート定義
├── tests/                # テストコード
│   ├── Feature/          # 機能テスト
│   └── Unit/             # 単体テスト
└── [設定ファイル群]
```

### Git操作

- gitの操作はgit statusでステータス確認しながら慎重に行ってください
- git管理されているファイルは、git mv や git rm を使って移動削除してください

### 初期実装フェーズでの優先事項

1. **基本機能の迅速な実装**
   - MVPを早期に実現するための最小限の機能実装
   - 基本的なUI/UXの構築
   - コアとなるデータフローの確立

2. **スケーラビリティの確保**
   - 将来の拡張を考慮したコンポーネント設計
   - 再利用可能なユーティリティ関数の作成
   - 適切なデータモデルの設計

3. **技術的負債の管理**
   - 初期段階での技術的負債を記録
   - リファクタリングポイントの明確化
   - 将来の改善計画の策定

## エラー対応プロトコル

1. **問題の特定**
   - エラーメッセージの解析
   - 影響範囲の特定
   - 原因の切り分け

2. **解決策の策定と実装**
   - 複数の対応案の検討
   - 最適解の選択と実装
   - テストによる検証

3. **文書化**
   - 問題と解決策の記録
   - 再発防止策の提案

## 実装プロセス

1. **設計フェーズ**
   - 要件の整理と分析
   - 技術スタックの選定
   - アーキテクチャ設計
   - データモデル設計

2. **初期実装フェーズ**
   - プロジェクト構造の構築
   - コアコンポーネントの実装
   - 基本的なデータフローの確立
   - 最小限のUI実装

3. **機能拡張フェーズ**
   - 追加機能の実装
   - UIの改善
   - パフォーマンスの最適化

4. **検証フェーズ**
   - テストの実装と実行
   - バグ修正
   - ユーザーフィードバックの反映

以上の指示に従い、迅速かつ効率的にWebサービスの初期制作を進めます。指示された範囲内でのみ処理を行い、不要な追加実装は行いません。不明点や重要な判断が必要な場合は、必ず確認を取ります。